#version 450// BINDINGlayout ( set = 0, binding = 0 ) uniform ModelViewProj {    mat4 model;    mat4 view;    mat4 proj;} mvp;// INPUTlayout ( location = 0 ) in vec3 in_position;layout ( location = 1 ) in vec2 in_uv;layout ( location = 2 ) in vec3 in_normal;layout ( location = 3 ) in vec3 in_tangent;layout ( location = 4 ) in vec3 in_bitangent;// OUTPUTlayout ( location = 0 ) out vec2 frag_uv;layout ( location = 1 ) out mat3 frag_TBN;// SHADER ENTRY POINTvoid main( ){    const vec3 T = normalize( vec3( mvp.model * vec4( in_tangent, 0.0 ) ) );    const vec3 B = normalize( vec3( mvp.model * vec4( in_bitangent, 0.0 ) ) );    const vec3 N = normalize( vec3( mvp.model * vec4( in_normal, 0.0 ) ) );    frag_TBN = mat3( T, B, N );    gl_Position = mvp.proj * mvp.view * mvp.model * vec4( in_position, 1.0 );    frag_uv = in_uv;}